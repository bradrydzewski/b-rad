// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/{{toLower repo}}/client (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	types "github.com/{{toLower repo}}/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// {{title parent}} mocks base method
func (m *MockClient) {{title parent}}(arg0, arg1 string) (*types.{{title parent}}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "{{title parent}}", arg0, arg1)
	ret0, _ := ret[0].(*types.{{title parent}})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// {{title parent}} indicates an expected call of {{title parent}}
func (mr *MockClientMockRecorder) {{title parent}}(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "{{title parent}}", reflect.TypeOf((*MockClient)(nil).{{title parent}}), arg0, arg1)
}

// {{title parent}}Create mocks base method
func (m *MockClient) {{title parent}}Create(arg0 string, arg1 *types.{{title parent}}) (*types.{{title parent}}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "{{title parent}}Create", arg0, arg1)
	ret0, _ := ret[0].(*types.{{title parent}})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// {{title parent}}Create indicates an expected call of {{title parent}}Create
func (mr *MockClientMockRecorder) {{title parent}}Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "{{title parent}}Create", reflect.TypeOf((*MockClient)(nil).{{title parent}}Create), arg0, arg1)
}

// {{title parent}}Delete mocks base method
func (m *MockClient) {{title parent}}Delete(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "{{title parent}}Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// {{title parent}}Delete indicates an expected call of {{title parent}}Delete
func (mr *MockClientMockRecorder) {{title parent}}Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "{{title parent}}Delete", reflect.TypeOf((*MockClient)(nil).{{title parent}}Delete), arg0, arg1)
}

// {{title parent}}List mocks base method
func (m *MockClient) {{title parent}}List(arg0 string, arg1 types.Params) ([]*types.{{title parent}}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "{{title parent}}List", arg0, arg1)
	ret0, _ := ret[0].([]*types.{{title parent}})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// {{title parent}}List indicates an expected call of {{title parent}}List
func (mr *MockClientMockRecorder) {{title parent}}List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "{{title parent}}List", reflect.TypeOf((*MockClient)(nil).{{title parent}}List), arg0, arg1)
}

// {{title parent}}Update mocks base method
func (m *MockClient) {{title parent}}Update(arg0, arg1 string, arg2 *types.{{title parent}}Input) (*types.{{title parent}}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "{{title parent}}Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types.{{title parent}})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// {{title parent}}Update indicates an expected call of {{title parent}}Update
func (mr *MockClientMockRecorder) {{title parent}}Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "{{title parent}}Update", reflect.TypeOf((*MockClient)(nil).{{title parent}}Update), arg0, arg1, arg2)
}

// Login mocks base method
func (m *MockClient) Login(arg0, arg1 string) (*types.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*types.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockClientMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockClient)(nil).Login), arg0, arg1)
}

// Member mocks base method
func (m *MockClient) Member(arg0, arg1 string) (*types.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Member", arg0, arg1)
	ret0, _ := ret[0].(*types.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Member indicates an expected call of Member
func (mr *MockClientMockRecorder) Member(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Member", reflect.TypeOf((*MockClient)(nil).Member), arg0, arg1)
}

// MemberCreate mocks base method
func (m *MockClient) MemberCreate(arg0 *types.MembershipInput) (*types.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemberCreate", arg0)
	ret0, _ := ret[0].(*types.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemberCreate indicates an expected call of MemberCreate
func (mr *MockClientMockRecorder) MemberCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemberCreate", reflect.TypeOf((*MockClient)(nil).MemberCreate), arg0)
}

// MemberDelete mocks base method
func (m *MockClient) MemberDelete(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemberDelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MemberDelete indicates an expected call of MemberDelete
func (mr *MockClientMockRecorder) MemberDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemberDelete", reflect.TypeOf((*MockClient)(nil).MemberDelete), arg0, arg1)
}

// MemberList mocks base method
func (m *MockClient) MemberList(arg0 string, arg1 types.Params) ([]*types.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemberList", arg0, arg1)
	ret0, _ := ret[0].([]*types.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemberList indicates an expected call of MemberList
func (mr *MockClientMockRecorder) MemberList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemberList", reflect.TypeOf((*MockClient)(nil).MemberList), arg0, arg1)
}

// MemberUpdate mocks base method
func (m *MockClient) MemberUpdate(arg0 *types.MembershipInput) (*types.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemberUpdate", arg0)
	ret0, _ := ret[0].(*types.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemberUpdate indicates an expected call of MemberUpdate
func (mr *MockClientMockRecorder) MemberUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemberUpdate", reflect.TypeOf((*MockClient)(nil).MemberUpdate), arg0)
}

// {{title project}} mocks base method
func (m *MockClient) {{title project}}(arg0 string) (*types.{{title project}}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "{{title project}}", arg0)
	ret0, _ := ret[0].(*types.{{title project}})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// {{title project}} indicates an expected call of {{title project}}
func (mr *MockClientMockRecorder) {{title project}}(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "{{title project}}", reflect.TypeOf((*MockClient)(nil).{{title project}}), arg0)
}

// {{title project}}Create mocks base method
func (m *MockClient) {{title project}}Create(arg0 *types.{{title project}}) (*types.{{title project}}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "{{title project}}Create", arg0)
	ret0, _ := ret[0].(*types.{{title project}})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// {{title project}}Create indicates an expected call of {{title project}}Create
func (mr *MockClientMockRecorder) {{title project}}Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "{{title project}}Create", reflect.TypeOf((*MockClient)(nil).{{title project}}Create), arg0)
}

// {{title project}}Delete mocks base method
func (m *MockClient) {{title project}}Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "{{title project}}Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// {{title project}}Delete indicates an expected call of {{title project}}Delete
func (mr *MockClientMockRecorder) {{title project}}Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "{{title project}}Delete", reflect.TypeOf((*MockClient)(nil).{{title project}}Delete), arg0)
}

// {{title project}}List mocks base method
func (m *MockClient) {{title project}}List(arg0 types.Params) ([]*types.{{title project}}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "{{title project}}List", arg0)
	ret0, _ := ret[0].([]*types.{{title project}})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// {{title project}}List indicates an expected call of {{title project}}List
func (mr *MockClientMockRecorder) {{title project}}List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "{{title project}}List", reflect.TypeOf((*MockClient)(nil).{{title project}}List), arg0)
}

// {{title project}}Update mocks base method
func (m *MockClient) {{title project}}Update(arg0 string, arg1 *types.{{title project}}Input) (*types.{{title project}}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "{{title project}}Update", arg0, arg1)
	ret0, _ := ret[0].(*types.{{title project}})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// {{title project}}Update indicates an expected call of {{title project}}Update
func (mr *MockClientMockRecorder) {{title project}}Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "{{title project}}Update", reflect.TypeOf((*MockClient)(nil).{{title project}}Update), arg0, arg1)
}

// Register mocks base method
func (m *MockClient) Register(arg0, arg1 string) (*types.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(*types.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockClientMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockClient)(nil).Register), arg0, arg1)
}

// {{title child}} mocks base method
func (m *MockClient) {{title child}}(arg0, arg1, arg2 string) (*types.{{title child}}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "{{title child}}", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types.{{title child}})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// {{title child}} indicates an expected call of {{title child}}
func (mr *MockClientMockRecorder) {{title child}}(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "{{title child}}", reflect.TypeOf((*MockClient)(nil).{{title child}}), arg0, arg1, arg2)
}

// {{title child}}Create mocks base method
func (m *MockClient) {{title child}}Create(arg0, arg1 string, arg2 *types.{{title child}}) (*types.{{title child}}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "{{title child}}Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types.{{title child}})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// {{title child}}Create indicates an expected call of {{title child}}Create
func (mr *MockClientMockRecorder) {{title child}}Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "{{title child}}Create", reflect.TypeOf((*MockClient)(nil).{{title child}}Create), arg0, arg1, arg2)
}

// {{title child}}Delete mocks base method
func (m *MockClient) {{title child}}Delete(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "{{title child}}Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// {{title child}}Delete indicates an expected call of {{title child}}Delete
func (mr *MockClientMockRecorder) {{title child}}Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "{{title child}}Delete", reflect.TypeOf((*MockClient)(nil).{{title child}}Delete), arg0, arg1, arg2)
}

// {{title child}}List mocks base method
func (m *MockClient) {{title child}}List(arg0, arg1 string, arg2 types.Params) ([]*types.{{title child}}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "{{title child}}List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*types.{{title child}})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// {{title child}}List indicates an expected call of {{title child}}List
func (mr *MockClientMockRecorder) {{title child}}List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "{{title child}}List", reflect.TypeOf((*MockClient)(nil).{{title child}}List), arg0, arg1, arg2)
}

// {{title child}}Update mocks base method
func (m *MockClient) {{title child}}Update(arg0, arg1, arg2 string, arg3 *types.{{title child}}Input) (*types.{{title child}}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "{{title child}}Update", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*types.{{title child}})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// {{title child}}Update indicates an expected call of {{title child}}Update
func (mr *MockClientMockRecorder) {{title child}}Update(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "{{title child}}Update", reflect.TypeOf((*MockClient)(nil).{{title child}}Update), arg0, arg1, arg2, arg3)
}

// Self mocks base method
func (m *MockClient) Self() (*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Self")
	ret0, _ := ret[0].(*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Self indicates an expected call of Self
func (mr *MockClientMockRecorder) Self() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Self", reflect.TypeOf((*MockClient)(nil).Self))
}

// Token mocks base method
func (m *MockClient) Token() (*types.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Token")
	ret0, _ := ret[0].(*types.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Token indicates an expected call of Token
func (mr *MockClientMockRecorder) Token() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*MockClient)(nil).Token))
}

// User mocks base method
func (m *MockClient) User(arg0 string) (*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User", arg0)
	ret0, _ := ret[0].(*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User
func (mr *MockClientMockRecorder) User(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockClient)(nil).User), arg0)
}

// UserCreate mocks base method
func (m *MockClient) UserCreate(arg0 *types.User) (*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCreate", arg0)
	ret0, _ := ret[0].(*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserCreate indicates an expected call of UserCreate
func (mr *MockClientMockRecorder) UserCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreate", reflect.TypeOf((*MockClient)(nil).UserCreate), arg0)
}

// UserDelete mocks base method
func (m *MockClient) UserDelete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDelete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserDelete indicates an expected call of UserDelete
func (mr *MockClientMockRecorder) UserDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDelete", reflect.TypeOf((*MockClient)(nil).UserDelete), arg0)
}

// UserList mocks base method
func (m *MockClient) UserList(arg0 types.Params) ([]*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserList", arg0)
	ret0, _ := ret[0].([]*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserList indicates an expected call of UserList
func (mr *MockClientMockRecorder) UserList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserList", reflect.TypeOf((*MockClient)(nil).UserList), arg0)
}

// UserUpdate mocks base method
func (m *MockClient) UserUpdate(arg0 string, arg1 *types.UserInput) (*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserUpdate", arg0, arg1)
	ret0, _ := ret[0].(*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserUpdate indicates an expected call of UserUpdate
func (mr *MockClientMockRecorder) UserUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUpdate", reflect.TypeOf((*MockClient)(nil).UserUpdate), arg0, arg1)
}
